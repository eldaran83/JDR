// <auto-generated />
using JDR.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace JDR.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CategoriePersonne", b =>
                {
                    b.Property<int>("CategoriePersonneId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Titre");

                    b.HasKey("CategoriePersonneId");

                    b.ToTable("CategoriePersonnes");
                });

            modelBuilder.Entity("JDR.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("VousEtesLeHeros.Models.BO.Equipements.CategorieEquipement", b =>
                {
                    b.Property<int>("CategorieEquipementID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TitreCategorie");

                    b.HasKey("CategorieEquipementID");

                    b.ToTable("CategorieEquipements");
                });

            modelBuilder.Entity("VousEtesLeHeros.Models.BO.Equipements.Equipement", b =>
                {
                    b.Property<int>("EquipementID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AventureID");

                    b.Property<int?>("CategorieEquipementID");

                    b.Property<int?>("Dommage");

                    b.Property<int>("Durete");

                    b.Property<string>("Nom");

                    b.Property<int>("Prix");

                    b.HasKey("EquipementID");

                    b.HasIndex("AventureID");

                    b.HasIndex("CategorieEquipementID");

                    b.ToTable("Equipements");
                });

            modelBuilder.Entity("VousEtesLeHeros.Models.BO.Histoires.Aventure", b =>
                {
                    b.Property<int>("AventureID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateDebut");

                    b.Property<string>("Titre");

                    b.HasKey("AventureID");

                    b.ToTable("Aventures");
                });

            modelBuilder.Entity("VousEtesLeHeros.Models.BO.Histoires.Message", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AventureID");

                    b.Property<string>("Contenu");

                    b.Property<string>("Titre");

                    b.HasKey("MessageID");

                    b.HasIndex("AventureID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("VousEtesLeHeros.Models.BO.Personnes.Personne", b =>
                {
                    b.Property<int>("PersonneID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AventureID");

                    b.Property<int>("CategoriePersonneID");

                    b.Property<int>("Dexterite");

                    b.Property<int>("Experience");

                    b.Property<int>("Force");

                    b.Property<int>("Intelligence");

                    b.Property<int>("Niveau");

                    b.Property<string>("Nom");

                    b.Property<int>("Vie");

                    b.HasKey("PersonneID");

                    b.HasIndex("AventureID");

                    b.HasIndex("CategoriePersonneID");

                    b.ToTable("Personnes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("JDR.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("JDR.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JDR.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("JDR.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VousEtesLeHeros.Models.BO.Equipements.Equipement", b =>
                {
                    b.HasOne("VousEtesLeHeros.Models.BO.Histoires.Aventure")
                        .WithMany("Equipements")
                        .HasForeignKey("AventureID");

                    b.HasOne("VousEtesLeHeros.Models.BO.Equipements.CategorieEquipement", "CategorieEquipement")
                        .WithMany("Equipements")
                        .HasForeignKey("CategorieEquipementID");
                });

            modelBuilder.Entity("VousEtesLeHeros.Models.BO.Histoires.Message", b =>
                {
                    b.HasOne("VousEtesLeHeros.Models.BO.Histoires.Aventure", "Aventure")
                        .WithMany("Messages")
                        .HasForeignKey("AventureID");
                });

            modelBuilder.Entity("VousEtesLeHeros.Models.BO.Personnes.Personne", b =>
                {
                    b.HasOne("VousEtesLeHeros.Models.BO.Histoires.Aventure")
                        .WithMany("Personnes")
                        .HasForeignKey("AventureID");

                    b.HasOne("CategoriePersonne", "CategoriePersonne")
                        .WithMany("Personnes")
                        .HasForeignKey("CategoriePersonneID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
